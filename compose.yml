version: '3.9'

services:

  ## Mongo Docker Compose Config for product service
  mongo:
    container_name: mongo
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    expose:
      - "27017"
    networks:
      - kafka-network
    volumes:
      - ./mongo-data:/data/db

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventoryservice
      POSTGRES_USER: mangan
      POSTGRES_PASSWORD: Postgres@12
      PGDATA: /data/postgre
    volumes:
      - ./postgres-inventory:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - kafka-network
    restart: always

  mysql-order:
    container_name: mysql-order
    image: mysql:latest
    environment:
      DATABASE_HOST: docker-mysql
      DATABASE_PORT: 3306
      MYSQL_DATABASE: orderservice
      MYSQL_USER: admin
      MYSQL_PASSWORD: MySql@12
      MYSQL_ROOT_PASSWORD: MySql@12  # Root password for MySQL
    volumes:
      - ./mysql-order-data:/var/lib/mysql  # Correct volume for MySQL data
    ports:
      - "3307:3306"  # Correct MySQL port
    networks:
      - kafka-network
    restart: always

  mysql-user:
    container_name: mysql-user
    image: mysql:latest
    environment:
      DATABASE_HOST: docker-mysql
      DATABASE_PORT: 3306
      MYSQL_DATABASE: userservice
      MYSQL_USER: admin
      MYSQL_PASSWORD: MySql@12
      MYSQL_ROOT_PASSWORD: MySql@12  # Root password for MySQL
    volumes:
      - ./mysql-user-data:/var/lib/mysql  # Correct volume for MySQL data
    ports:
      - "3308:3306"  # Mapping different port for mysql-user
    networks:
      - kafka-network
    restart: always


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      retries: 5
      timeout: 5s
    networks:
      - kafka-network
    volumes:
      - ./zookeeper-data:/var/lib/zookeeper/data
      - ./zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 10s
      retries: 5
      timeout: 5s
    networks:
      - kafka-network
    volumes:
      - ./kafka-data:/var/lib/kafka/data



  ## Eureka Server
  discovery-server:
    image: mangancharan/discoveryserver:0.0.1
    container_name: discoveryserver
    ports:
      - "8761:8761"
    networks:
      - kafka-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  api-gateway:
    image: mangancharan/apigateway:0.0.1
    container_name: apigateway
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    networks:
      - kafka-network
    depends_on:
      - discovery-server

  ## Product-Service Docker Compose Config
  product-service:
    container_name: productservice
    image: mangancharan/productservice:0.0.1
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - kafka-network
    depends_on:
      - mongo
      - discovery-server
      - api-gateway

  ## User-Service Docker Compose Config
  user-service:
    container_name: userservice
    image: mangancharan/userservice:0.0.1
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-user:3306/userservice?autoReconnect=true&allowPublicKeyRetrieval=true&useSSL=true
      - SPRING_DATASOURCE_USER=admin
      - SPRING_DATASOURCE_PASSWORD=MySql@12
    networks:
      - kafka-network
    depends_on:
      - mysql-user
      - discovery-server
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: orderservice
    image: mangancharan/orderservice:0.0.2
    environment:
       - SPRING_PROFILES_ACTIVE=docker
       - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-order:3306/orderservice?autoReconnect=true&allowPublicKeyRetrieval=true&useSSL=false
       - SPRING_DATASOURCE_USER=admin
       - SPRING_DATASOURCE_PASSWORD=MySql@12
    networks:
       - kafka-network
    depends_on:
      - mysql-order
      - kafka
      - discovery-server
      - api-gateway

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventoryservice
    image: mangancharan/inventoryservice:0.0.1
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventoryservice
    networks:
      - kafka-network
    depends_on:
      - postgres-inventory
      - discovery-server
      - api-gateway

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notificationservice
    image: mangancharan/notificationservice:0.0.2
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - kafka-network
    depends_on:
      - kafka
      - discovery-server
      - api-gateway


networks:
  kafka-network:
    driver: bridge